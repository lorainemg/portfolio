<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Compilation on Loraine's Portfolio</title><link>https://lorainemg.github.io/portfolio/tags/compilation/</link><description>Recent content in Compilation on Loraine's Portfolio</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sat, 20 Jul 2019 11:25:05 -0400</lastBuildDate><atom:link href="https://lorainemg.github.io/portfolio/tags/compilation/index.xml" rel="self" type="application/rss+xml"/><item><title>Grammar Analyzer</title><link>https://lorainemg.github.io/portfolio/projects/school/project11/</link><pubDate>Sat, 20 Jul 2019 11:25:05 -0400</pubDate><guid>https://lorainemg.github.io/portfolio/projects/school/project11/</guid><description>&lt;h4 id="summary">Summary&lt;/h4>
&lt;p>The object of this project is that given a grammar (represented in a plain text format) perform the following analyses:&lt;/p>
&lt;ul>
&lt;li>Compute the &lt;strong>First&lt;/strong> and &lt;strong>Follow&lt;/strong> sets.&lt;/li>
&lt;li>Determine if the grammar is &lt;strong>LL(1)&lt;/strong>. If so, show the table of the non-recursive predictive method and give the derivation trees for a given set of strings. If not, please report a conflict string along with an explanation of the conflict. Transform the grammar to remove common prefixes and immediate left recursion.&lt;/li>
&lt;li>Perform analysis similar to the previous one but with the &lt;strong>SLR&lt;/strong>, &lt;strong>LR,&lt;/strong> and &lt;strong>LALR&lt;/strong> parsers.&lt;/li>
&lt;li>If the grammar is regular, convert it to automaton and regular expression.&lt;/li>
&lt;li>Show version of grammar without immediate left recursion, common prefixes, and unnecessary productions.&lt;/li>
&lt;/ul>
&lt;p>Here&amp;rsquo;s an example of a LALR grammar generated in the application:&lt;/p></description></item></channel></rss>